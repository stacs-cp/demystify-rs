language ESSENCE' 1.0

given op : matrix indexed by [int(1..20)] of int(1..3) $ 1 is plus, 2 is minus, 3 is multiply.
given presetvals : matrix indexed by [int(1..9),int(1..7)] of int(-2..9)

given width: int
given height: int

letting VALUES be domain int(-2..9)
letting NROWS be domain int(1..height)
letting NCOLS be domain int(1..width)

$#VAR res
find res : matrix indexed by [NROWS,NCOLS] of VALUES

$ Here comes the MUS/SAT reasoning mess
$#CON ops_bool "equation {{index[0]}} holds"
find ops_bool : matrix indexed by [int(1..20)] of bool
$#CON two_digit "this number {{index[0]}} cannot be 0 since it is the beginning of a 2 digit number"
find two_digit : matrix indexed by [int(1..8)] of bool

such that

$ set initial values
    forAll row : NROWS .
		forAll col : NCOLS .
			((presetvals[row,col] = -2) -> (res[row,col] = -2))
			/\
			((presetvals[row,col] = -1) -> (res[row,col] >= 0))
			/\
			((presetvals[row,col] > -1) -> (res[row,col] = presetvals[row,col])),

$ operation constraints
	ops_bool[1] -> (
		((op[1] = 1) -> (res[1,1] + res[1,2] = res[1,3]))/\
		((op[1] = 2) -> (res[1,1] - res[1,2] = res[1,3]))/\
		((op[1] = 3) -> (res[1,1] * res[1,2] = res[1,3]))),
	ops_bool[2] -> (
		((op[2] = 1) -> (res[1,5] + res[1,6] = res[1,7]))/\
		((op[2] = 2) -> (res[1,5] - res[1,6] = res[1,7]))/\
		((op[2] = 3) -> (res[1,5] * res[1,6] = res[1,7]))),
	ops_bool[3] -> (
		((op[3] = 1) -> (res[1,1] + res[2,1] = res[3,1]*10 + res[4,1]))/\
		((op[3] = 2) -> (res[1,1] - res[2,1] = res[3,1]*10 + res[4,1]))/\
		((op[3] = 3) -> (res[1,1] * res[2,1] = res[3,1]*10 + res[4,1]))),
	ops_bool[4] -> (
		((op[4] = 1) -> (res[1,3] + res[2,3] = res[3,3]*10 + res[4,3]))/\
		((op[4] = 2) -> (res[1,3] - res[2,3] = res[3,3]*10 + res[4,3]))/\
		((op[4] = 3) -> (res[1,3] * res[2,3] = res[3,3]*10 + res[4,3]))),
	ops_bool[5] -> (
		((op[5] = 1) -> (res[1,5] + res[2,5] = res[3,5]*10 + res[4,5]))/\
		((op[5] = 2) -> (res[1,5] - res[2,5] = res[3,5]*10 + res[4,5]))/\
		((op[5] = 3) -> (res[1,5] * res[2,5] = res[3,5]*10 + res[4,5]))),
	ops_bool[6] -> (
		((op[6] = 1) -> (res[1,7] + res[2,7] = res[3,7]*10 + res[4,7]))/\
		((op[6] = 2) -> (res[1,7] - res[2,7] = res[3,7]*10 + res[4,7]))/\
		((op[6] = 3) -> (res[1,7] * res[2,7] = res[3,7]*10 + res[4,7]))),
	ops_bool[7] -> (
		((op[7] = 1) -> (res[2,3] + res[2,4] = res[2,5]))/\
		((op[7] = 2) -> (res[2,3] - res[2,4] = res[2,5]))/\
		((op[7] = 3) -> (res[2,3] * res[2,4] = res[2,5]))),
	ops_bool[8] -> (
		((op[8] = 1) -> (res[4,1] + res[4,2] = res[4,3]))/\
		((op[8] = 2) -> (res[4,1] - res[4,2] = res[4,3]))/\
		((op[8] = 3) -> (res[4,1] * res[4,2] = res[4,3]))),
	ops_bool[9] -> (
		((op[9] = 1) -> (res[4,5] + res[4,6] = res[4,7]))/\
		((op[9] = 2) -> (res[4,5] - res[4,6] = res[4,7]))/\
		((op[9] = 3) -> (res[4,5] * res[4,6] = res[4,7]))),
	ops_bool[10] -> (
		((op[10] = 1) -> (res[4,2] + res[5,2] = res[6,2]))/\
		((op[10] = 2) -> (res[4,2] - res[5,2] = res[6,2]))/\
		((op[10] = 3) -> (res[4,2] * res[5,2] = res[6,2]))),
	ops_bool[11] -> (
		((op[11] = 1) -> (res[4,6] + res[5,6] = res[6,6]))/\
		((op[11] = 2) -> (res[4,6] - res[5,6] = res[6,6]))/\
		((op[11] = 3) -> (res[4,6] * res[5,6] = res[6,6]))),
	ops_bool[12] -> (
		((op[12] = 1) -> (res[6,1] + res[6,2] = res[6,3]))/\
		((op[12] = 2) -> (res[6,1] - res[6,2] = res[6,3]))/\
		((op[12] = 3) -> (res[6,1] * res[6,2] = res[6,3]))),
	ops_bool[13] -> (
		((op[13] = 1) -> (res[6,5] + res[6,6] = res[6,7]))/\
		((op[13] = 2) -> (res[6,5] - res[6,6] = res[6,7]))/\
		((op[13] = 3) -> (res[6,5] * res[6,6] = res[6,7]))),
	ops_bool[14] -> (
		((op[14] = 1) -> (res[6,1] + res[7,1] = res[8,1]*10 + res[9,1]))/\
		((op[14] = 2) -> (res[6,1] - res[7,1] = res[8,1]*10 + res[9,1]))/\
		((op[14] = 3) -> (res[6,1] * res[7,1] = res[8,1]*10 + res[9,1]))),
	ops_bool[15] -> (
		((op[15] = 1) -> (res[6,3] + res[7,3] = res[8,3]*10 + res[9,3]))/\
		((op[15] = 2) -> (res[6,3] - res[7,3] = res[8,3]*10 + res[9,3]))/\
		((op[15] = 3) -> (res[6,3] * res[7,3] = res[8,3]*10 + res[9,3]))),
	ops_bool[16] -> (
		((op[16] = 1) -> (res[6,5] + res[7,5] = res[8,5]*10 + res[9,5]))/\
		((op[16] = 2) -> (res[6,5] - res[7,5] = res[8,5]*10 + res[9,5]))/\
		((op[16] = 3) -> (res[6,5] * res[7,5] = res[8,5]*10 + res[9,5]))),
	ops_bool[17] -> (
		((op[17] = 1) -> (res[6,7] + res[7,7] = res[8,7]*10 + res[9,7]))/\
		((op[17] = 2) -> (res[6,7] - res[7,7] = res[8,7]*10 + res[9,7]))/\
		((op[17] = 3) -> (res[6,7] * res[7,7] = res[8,7]*10 + res[9,7]))),
	ops_bool[18] -> (
		((op[18] = 1) -> (res[7,3] + res[7,4] = res[7,5]))/\
		((op[18] = 2) -> (res[7,3] - res[7,4] = res[7,5]))/\
		((op[18] = 3) -> (res[7,3] * res[7,4] = res[7,5]))),
	ops_bool[19] -> (
		((op[19] = 1) -> (res[9,1] + res[9,2] = res[9,3]))/\
		((op[19] = 2) -> (res[9,1] - res[9,2] = res[9,3]))/\
		((op[19] = 3) -> (res[9,1] * res[9,2] = res[9,3]))),
	ops_bool[20] -> (
		((op[20] = 1) -> (res[9,5] + res[9,6] = res[9,7]))/\
		((op[20] = 2) -> (res[9,5] - res[9,6] = res[9,7]))/\
		((op[20] = 3) -> (res[9,5] * res[9,6] = res[9,7]))),

$ the following HAVE TO be > 0
	two_digit[1] -> (res[3,1] > 0),
	two_digit[2] -> (res[3,3] > 0),
	two_digit[3] -> (res[3,5] > 0),
	two_digit[4] -> (res[3,7] > 0),
	two_digit[5] -> (res[8,1] > 0),
	two_digit[6] -> (res[8,3] > 0),
	two_digit[7] -> (res[8,5] > 0),
	two_digit[8] -> (res[8,7] > 0),

$ check if problem is SAT
$	and([and(ops_bool), and(two_digit)]),

	true

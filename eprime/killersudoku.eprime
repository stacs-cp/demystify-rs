language ESSENCE' 1.0


$ Model for the Killer Sudoku. Adapted for the demistify tool.
$ a "hint" is a box
given n_hints : int
given hints : matrix indexed by [int(1..n_hints)] of int(1..45) 
given grid : matrix indexed by [int(1..9),int(1..9)] of int(0..n_hints) 

$#VAR x
find x : matrix indexed by [int(1..9),int(1..9)] of int(1..9) 

$ all the reasoning
$ -----------------

$#CON col_alldiff "cells ({{index[0]}},{{index[1]}}) and ({{index[0]}},{{index[2]}}) cannot both be {{index[3]}} as they are in the same column"
find col_alldiff: matrix indexed by [int(1..9),int(1..9),int(1..9),int(1..9)] of bool
$#CON row_alldiff "cells ({{index[0]}},{{index[1]}}) and ({{index[0]}},{{index[2]}}) cannot both be {{index[3]}} as they are in the same row"
find row_alldiff: matrix indexed by [int(1..9),int(1..9),int(1..9),int(1..9)] of bool
$#CON box_alldiff "cells ({{3*(index[0])+(index[2])}},{{3*(index[1])+(index[3])}}) and ({{3*(index[0])+(index[4])}},{{3*(index[1])+(index[5])}}) cannot both be {{index[6]}} as they are in the same box"
find box_alldiff: matrix indexed by [int(0..2),int(0..2),int(0..2),int(0..2),int(0..2),int(0..2),int(1..9)] of bool
$#CON hint_alldiff "cells ({{index[2]}},{{index[1]}}) and ({{index[4]}},{{index[3]}}) cannot both be {{index[5]}} as they are in the same hint {{index[0]}}"
find hint_alldiff: matrix indexed by [int(1..n_hints),int(1..9),int(1..9),int(1..9),int(1..9),int(1..9)] of bool
$find hint_alldiff: matrix indexed by [int(1..n_hints)] of bool 
$#CON sum_hint "hint {{index[0]}} must sum to {params['hints'][a[0]]}}"
find sum_hint    : matrix indexed by [int(1..n_hints)] of bool 

$#CON sum_row "row {{index[0]}} must sum to 45"
find sum_row : matrix indexed by [int(1..9)] of bool 
$#CON sum_col "col {{index[0]}} must sum to 45"
find sum_col : matrix indexed by [int(1..9)] of bool 
$#CON sum_box "box {{index[0]}} must sum to 45"
find sum_box : matrix indexed by [int(1..9)] of bool 

such that 

$ implicit sum constraints 
$ rows
forAll i: int(1..9)  .
    sum_row[i] -> sum(x[..,i]) = 45,

$ columns
forAll i: int(1..9)  .
    sum_col[i] -> sum(x[i,..]) = 45,

$ 3x3 boxes
forAll i,j: int(0..2) .
    sum_box[(i*3)+j+1] -> sum([x[r,c] | r: int(i*3+1..i*3+3), c: int(j*3+1..j*3+3)]) = 45,

$ columns
forAll i:int(1..9).
    forAll j1,j2:int(1..9). j1 < j2 ->
        forAll d:int(1..9). col_alldiff[i,j1,j2,d] -> !(x[i,j1] = d /\ x[i,j2]=d),

$ rows
forAll j:int(1..9).
    forAll i1,i2:int(1..9). i1 < i2 ->
        forAll d:int(1..9). row_alldiff[j,i1,i2,d] -> !(x[i1,j] = d /\ x[i2,j]=d),

$ 3x3 boxes
forAll a,b,i1,j1,i2,j2:int(0..2). (i1*3+j1) < (i2*3+j2) ->
    (
        forAll d:int(1..9). box_alldiff[a,b,i1,j1,i2,j2,d] ->
            !(x[1+3*a+i1,1+3*b+j1] = d /\ x[1+3*a+i2,1+3*b+j2] = d)
    ),

$ hints must sum up to what its required
forAll i: int(1..n_hints) .
    sum_hint[i] -> sum([ x[r,c] | r: int(1..9), c: int(1..9), grid[r,c] = i]) = hints[i],

$ elements in a hint must be different
forAll i: int(1..n_hints) .
    forAll c1,r1,c2,r2 : int(1..9) . ((c1 < c2 \/ r1 < r2) /\ grid[r1,c1] = i /\ grid[r2,c2] = i)  ->
        forAll d:int(1..9). hint_alldiff[i,c1,r1,c2,r2,d] -> !( x[r1,c1] = d /\ x[r2,c2] = d),

$    hint_alldiff[i] -> allDiff([ x[r,c] | r: int(1..9), c: int(1..9), grid[r,c] = i]),



$ get a solution please :)
$and([and(alldiff_row),and(alldiff_col),and(alldiff_box),and(sum_hint),and(alldiff_hint),and(sum_row),and(sum_col),and(sum_box)]),

true

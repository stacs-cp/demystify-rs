language ESSENCE' 1.0

letting D be domain int(1..9)
letting Ds be {1,2,3,4,5,6,7,8,9}

letting C be domain int(0..2)

given fixed : matrix indexed by [D,D] of int(0..9) 

$#VAR grid
find grid : matrix indexed by [D,D] of D

$#CON row_alldiff "cells ({a[0]},{a[1]}) and ({a[0]},{a[2]}) cannot both be {a[3]} as they are in the same row"
find row_alldiff: matrix indexed by [D,D,D,D] of bool

$#CON con_alldiff "cells ({a[0]},{a[1]}) and ({a[0]},{a[2]}) cannot both be {a[3]} as they are in the same column"
find con_alldiff: matrix indexed by [D,D,D,D] of bool

$#CON box_alldiff "cells ({1+3*int(a[0])+int(a[2])},{1+3*int(a[1])+int(a[3])}) and ({1+3*int(a[0])+int(a[4])},{1+3*int(a[1])+int(a[5])}) cannot both be {a[6]} as they are in the same box"
find box_alldiff: matrix indexed by [C,C,C,C,C,C,D] of bool

$#CON row_contains "Row {a[0]} must contain a {a[1]}"
find row_contains: matrix indexed by [D,D] of bool

$#CON con_contains "Column {a[0]} must contain a {a[1]}"
find con_contains: matrix indexed by [D,D] of bool

$#CON box_contains "The box starting at ({1+3*int(a[0])},{1+3*int(a[1])}) must contain a {a[2]}"
find box_contains: matrix indexed by [C,C,D] of bool


$#CON orthogonally "cells ({a[0]},{a[1]}) and ({int(a[0])+int(a[2])},{int(a[1])+int(a[3])}) cannot be {int(a[4])} and {int(a[4])+int(a[5])} because they cannot contain consecutive digits as they are orthogonally adjacent"
find orthogonally: matrix indexed by [D,D,int(0..1),int(0..1),D,int(-1,1)] of bool

$#CON king "cells ({a[0]},{a[1]}) and ({int(a[0])+int(a[2])},{int(a[1])+int(a[3])}) cannot both be {a[4]} as they are a king's move apart"
find king: matrix indexed by [D,D,int(-1,1),int(-1,1),D] of bool

$#CON knight "cells ({a[0]},{a[1]}) and ({int(a[0])+int(a[2])},{int(a[1])+int(a[3])}) cannot both be {a[4]} as they are a knight's move apart"
find knight: matrix indexed by [D,D,int(1,2),int(-2,-1,1,2),D] of bool

such that
forAll i,j: D.
    fixed[i,j] != 0 -> grid[i,j]=fixed[i,j],

forAll i:D.
    forAll j1,j2:D. j1 < j2 ->
        forAll d:D. row_alldiff[i,j1,j2,d] -> !(grid[i,j1] = d /\ grid[i,j2]=d),

forAll i,d:D.
     row_contains[i,d] -> or([grid[i,j]=d | j:D]),


forAll j:D.
    forAll i1,i2:D. i1 < i2 ->
        forAll d:D. con_alldiff[j,i1,i2,d] -> !(grid[i1,j] = d /\ grid[i2,j]=d),

forAll i,d:D.
     con_contains[i,d] -> or([grid[j,i]=d | j:D]),


forAll a,b,i1,j1,i2,j2:C. (i1*3+j1) < (i2*3+j2) ->
    (
        forAll d:D. box_alldiff[a,b,i1,j1,i2,j2,d] ->
            !(grid[1+3*a+i1,1+3*b+j1] = d /\ grid[1+3*a+i2,1+3*b+j2] = d)
    ),


forAll a,b:C. forAll d:D.
    (
        box_contains[a,b,d] ->
           or([grid[1+3*a+i,1+3*b+j] = d | i : C, j : C])
    ),


forAll i,j: D. forAll a,b:int(0..1). forAll d:D. forAll d_diff:int(-1,1).
    (a + b = 1 /\ i+a in Ds /\ j+b in Ds /\ d+d_diff in Ds) ->
    (
        orthogonally[i,j,a,b,d,d_diff] ->
            !(grid[i,j] = d /\ grid[i+a,j+b] = d+d_diff)
    ),


$ No need to consider a or b = 0, as that is covered by standard sudoku rules
forAll i,j: D. forAll a,b:int(-1,1). forAll d:D.
    ( (i+a) in Ds /\ (j+b) in Ds) ->
    (
        king[i,j,a,b,d] ->
            !(grid[i,j] = d /\ grid[i+a,j+b] = d)
    ),


 forAll i,j: D. forAll a:int(1,2). forAll b:int(-2,-1,1,2). forAll d:D.
    ( ( (|a| = 1 /\ |b| = 2) \/ (|a| = 2 /\ |b| = 1) ) /\ (i+a) in Ds /\ (j+b) in Ds) ->
    (
        knight[i,j,a,b,d] ->
           !(grid[i,j] = d /\ grid[i+a,j+b] = d)
    ),

1=1
$and(flatten([flatten(row_alldiff),flatten(con_alldiff),flatten(box_alldiff),flatten(orthogonally),flatten(king),flatten(knight)]))
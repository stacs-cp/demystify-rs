language ESSENCE' 1.0
$ Skyscrapers puzzle solver, originally modelled by Ian Gent
$ see https://www.conceptispuzzles.com/index.aspx?uri=puzzle/skyscrapers/techniques
$ based on model by Andras and Joan for Futoshiki


$$ Input is size, which is dimension of square grid
$$ And side_labels, 4xSIZE array of clues
$ side_labels[1,..] is clues along left of grid pointing right, 0 indicating no clue
$ side_labels[2,..] is clues along top of grid pointing down
$ side_labels[3,..] is clues along right of grid pointing left
$ side_labels[4,..] is clues along bottom of grid poiting up.

$$ To explain the model, just think of one dimension at first,
$$ The idea of the model is to have auxiliary variables which give the maximum number
$$ seen in that row to date, with a dummy value of zero at the zeroth cell.
$$ The skyscraper number is simply the number of times the max number increments.

$$ For all four dimensions I decided it would be too risky to try to change the
$$ starting point and deltas in each dimension, and annoying/buggy to type out the same
$$ constraints 4 times.  So instead I just form 4 copies of the original field, each one
$$ transposed/reversed as necessary to make the same set of constraints give the desired
$$ direction in the original field.  This makes sense as I know that Savile Row is going to
$$ identify all these variables anyway so there will not be surplus variables in the solver

$ we are assuming always a square grid.

given grid_size: int(1..)

$ the numeric values specified in the puzzle

letting   VALUES be domain int( 0..grid_size )
letting   RANGE  be domain int( 1..grid_size )

given     side_labels : matrix indexed by [int(1..4),RANGE] of VALUES

given GRID : matrix indexed by [RANGE,RANGE] of VALUES


$#VAR field

find      field  : matrix indexed by [RANGE, RANGE] of RANGE

$ -------- Reified variables -----------------------------

$#CON col_alldiff "cells ({{index[0]}},{{index[1]}}) and ({{index[0]}},{{index[2]}}) cannot both be {{index[3]}} as they are in the same column"
find col_alldiff: matrix indexed by [RANGE,RANGE,RANGE,RANGE] of bool

$#CON row_alldiff "cells ({{index[0]}},{{index[1]}}) and ({{index[0]}},{{index[2]}}) cannot both be {{index[3]}} as they are in the same row"
find row_alldiff: matrix indexed by [RANGE,RANGE,RANGE,RANGE] of bool


$#CON clues_left_on "the count for {{['left','top','right','bottom'] | nth(n=(index[0]-1))}} {{index[1]}} is {{params['side_labels'][index[0]][index[1]]}}"
find clues_left_on : matrix indexed by [int(1..4),RANGE] of bool

$#AUX max_left
find max_left : matrix indexed by [int(1..4),RANGE, VALUES] of VALUES

$#AUX sky_left
find sky_left : matrix indexed by [int(1..4),RANGE] of RANGE

$ four versions of field in different directions
$ index 1 is original field
$ index 2 is transpose so left corresponds to top hand in original
$ index 3 is reversed original so left corresponds to right hand in original
$ index 4 is transpose reversed so left corresponds to bottom in original

$#AUX variant_fields
find variant_fields : matrix indexed by [int(1..4),RANGE,RANGE] of RANGE

such that

$ port over hints grid to final solution
    forAll row : RANGE .
        forAll col : RANGE .
	 		((GRID[row,col] > 0) -> (field[row,col] = GRID[row,col])),

$ all columns have to be different
forAll i:RANGE.
    forAll j1,j2:RANGE. j1 < j2 ->
        forAll d:RANGE. col_alldiff[i,j1,j2,d] -> !(field[i,j1] = d /\ field[i,j2]=d),

$ all rows have to be different
forAll j:RANGE.
    forAll i1,i2:RANGE. i1 < i2 ->
        forAll d:RANGE. row_alldiff[j,i1,i2,d] -> !(field[i1,j] = d /\ field[i2,j]=d),

forAll row, col: RANGE .
    variant_fields[1,row,col] = field[row,col] /\
    variant_fields[2,row,col] = field[col,row] /\
    variant_fields[3,row,col] = field[row,grid_size+1-col] /\
    variant_fields[4,row,col] = field[grid_size+1-col,row],

forAll i : int(1..4) .
    forAll row : RANGE .
        max_left[i,row,0] = 0 /\
        forall col : RANGE .
             max_left[i,row,col] = max(max_left[i,row,col-1],variant_fields[i,row,col]) ,

forAll i : int(1..4) .
    forAll row : RANGE .
        sky_left[i,row] = sum col : RANGE . toInt( max_left[i,row,col-1] < max_left[i,row,col] ) ,

forAll i : int(1..4) .
    forAll row : RANGE .
        clues_left_on[i,row] -> (side_labels[i,row] > 0 -> (sky_left[i,row]=side_labels[i,row] )) ,

$ insist that probelm problem is sat

$and([and(row_alldiff), and(col_alldiff), and(flatten(clues_left_on)) ]),

true

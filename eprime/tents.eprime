language ESSENCE' 1.0

$ Grid size
given x,y, treecount: int

letting X be int(1..x)
letting Y be int(1..y)

$ -1 means 'no constraint'
given row_sums: matrix indexed by [X] of int
given col_sums: matrix indexed by [Y] of int

given trees: matrix indexed by [X,Y] of int(0..treecount)


$ Tree is negative number, tent is positive, -i is connected to i
$#VAR grid
find grid : matrix indexed by [X,Y] of int(-treecount..treecount)

$#CON adj "({{index[0]}}, {{index[1]}}) and ({{index[0]+index[2]}}, {{index[1]+index[3]}}) cannot both contain tents"
$ Check adjacent constraint
find adj: matrix indexed by [X,Y, int(-1..1), int(-1..1)] of bool

$#CON rowup "at least {{params['row_sums'][index[0]]}} tents(s) in row {{index[0]}}"
$#CON rowdown "at most {{params['row_sums'][index[0]]}} tents(s) in row {{index[0]}}"
find rowup: matrix indexed by [X] of bool
find rowdown: matrix indexed by [X] of bool

$#CON colup "at least {{params['col_sums'][index[0]]}} tents(s) in column {{index[0]}}"
$#CON coldown "at most {{params['col_sums'][index[0]]}} tents(s) in column {{index[0]}}"
find colup: matrix indexed by [Y] of bool
find coldown: matrix indexed by [Y] of bool

$#CON treetentup "tree {{index[0]}} must have a tent"
find treetentup: matrix indexed by [int(1..treecount)] of bool


$#CON treetentdown "tree {{index[0]}} must have at most one tent"
find treetentdown: matrix indexed by [int(1..treecount)] of bool

$#CON tentneartree "the tent for tree {{index[0]}} must be next to the tree"
find tentneartree: matrix indexed by [int(1..treecount)] of bool

such that


$ Set up tents:
forAll i:X. forAll j:Y.
(trees[i,j]>0 -> grid[i,j]=-trees[i,j]),

$ Make sure no unexpected trees
forAll i:X. forAll j:Y.
(trees[i,j]=0 -> grid[i,j]>=0),

$ Tent for each tree must be next to that tree
forAll i:X. forAll j:Y. forAll t: int(1..treecount).
tentneartree[t] -> (!(trees[i-1,j]=t \/ trees[i+1,j]=t \/ trees[i,j-1]=t \/ trees[i,j+1]=t) -> grid[i,j]!=t),

$ Every tree must have at least one tent
forAll t:int(1..treecount).
treetentup[t] -> ((sum i:X. sum j:Y. toInt(grid[i,j]=t))>=1),

$ Every tree must have at most one tent
forAll t:int(1..treecount).
treetentdown[t] -> ((sum i:X. sum j:Y. toInt(grid[i,j]=t))<=1),


forAll i:X. forAll j:Y. forAll k: int(0..1). forAll l: int(-1..1). $ We only need to check 4 directions (we do backwards and the downwards)
( !(k=0 /\ l = 0) /\ !(k=0 /\ l=1)  ) -> $ We do not need to explictly check 'off board', as those constraints will trivially true
(adj[i,j,k,l] -> !(grid[i,j]>0 /\ grid[i+k,j+l]>0)),

$ Column sums
forAll i:X.
(row_sums[i] != -1) -> (rowup[i] -> ((sum j:Y. toInt(grid[i,j]>0)) >= row_sums[i])),

forAll i:X.
(row_sums[i] != -1) -> (rowdown[i] -> ((sum j:Y. toInt(grid[i,j]>0)) <= row_sums[i])),

$ Row sums
forAll j:Y.
(col_sums[j] != -1) -> (colup[j] -> ((sum i:X. toInt(grid[i,j]>0)) >= col_sums[j])),

forAll j:Y.
(col_sums[j] != -1) -> (coldown[j] -> ((sum i:X. toInt(grid[i,j]>0)) <= col_sums[j])),

$and(treetent),and(rowup),and(rowdown),and(flatten(adj)),and(colup),and(coldown),

1=1
